/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from '@react-three/drei';
import { ForwardedRef, forwardRef, RefObject } from 'react';
import * as THREE from 'three';
import { Group } from 'three';
import { GLTF } from 'three-stdlib';
import ModelGltf from './xwing.gltf?url';

type GLTFResult = GLTF & {
  nodes: {
    Object_10: THREE.Mesh
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
  }
  materials: {
    ['Material.004']: THREE.MeshStandardMaterial
    Basic: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    Darkness: THREE.MeshStandardMaterial
    Emission: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
  }
}

export const XwingModel = forwardRef((props: JSX.IntrinsicElements['group'], ref:ForwardedRef<Group>) => {
  const { nodes, materials } = useGLTF(ModelGltf) as unknown as GLTFResult
  return (
    <group {...props} dispose={null} ref={ref}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.72}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group position={[0, 0, 0]} rotation={[0, 0, -Math.PI / 2]}>
            <mesh castShadow geometry={nodes.Object_10.geometry} material={materials['Material.004']} />
            <mesh castShadow geometry={nodes.Object_4.geometry} material={materials.Basic} />
            <mesh castShadow geometry={nodes.Object_5.geometry} material={materials['Material.003']} />
            <mesh castShadow geometry={nodes.Object_6.geometry} material={materials.Darkness} />
            <mesh castShadow geometry={nodes.Object_7.geometry} material={materials.Emission} />
            <mesh castShadow geometry={nodes.Object_8.geometry} material={materials['Material.001']} />
            <mesh castShadow geometry={nodes.Object_9.geometry} material={materials['Material.002']} />
          </group>
        </group>
      </group>
    </group>
  )
})

useGLTF.preload(ModelGltf)
